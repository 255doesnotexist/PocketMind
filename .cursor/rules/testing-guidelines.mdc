---
description: Guidelines for writing tests in the PocketMind project.
globs: ["*.test.ts", "*.test.tsx"]
alwaysApply: false
type: Auto Attached
---

# Testing Guidelines for PocketMind

## Testing Framework
- **Jest:** Use Jest as the primary testing framework for unit and integration tests.
- **React Native Testing Library:** Utilize `@testing-library/react-native` for testing React Native components, focusing on user interactions and accessibility.
- **React Hooks Testing Library:** Use `@testing-library/react-hooks` for testing custom React Hooks.

## What to Test
- **Services (`src/features/**/services/`):**
    - Test public methods for correct output given various inputs.
    - Mock external dependencies (like native modules `llama.rn`, `whisper.rn`, or network calls) using `jest.mock()`.
- **Utils (`src/utils/`, `src/features/**/utils/`):**
    - Test pure functions thoroughly with different edge cases.
- **Redux Store Logic (`src/features/**/store/`):**
    - Test reducers to ensure they update state correctly for given actions.
    - Test selectors to ensure they derive the correct data from the state.
    - Test thunks by mocking API calls and dispatching actions, then asserting the dispatched actions and final state.
- **Custom Hooks (`src/hooks/`, `src/features/**/hooks/`):**
    - Test their behavior, state updates, and returned values/functions using `@testing-library/react-hooks`.
- **Components (`src/components/`, `src/features/**/components/`, `src/features/**/screens/`):**
    - Test that they render correctly given different props.
    - Test user interactions (button presses, text input) and that the correct callbacks are fired or state changes occur.
    - Test accessibility props.
    - Focus on testing component behavior from a user's perspective, not implementation details.

## Test File Location and Naming
- Place test files alongside the files they are testing, or in a `__tests__` subfolder.
- Naming: `fileName.test.ts` or `fileName.test.tsx`.

## Mocking
- **Native Modules:**
  ```typescript
  // Example: __mocks__/llama.rn.ts (if llama.rn doesn't provide its own mock)
  export const initLlama = jest.fn().mockResolvedValue(true);
  export const completion = jest.fn().mockResolvedValue({ text: 'mocked response' });
  // ... mock other functions

  // In your test file:
  jest.mock('llama.rn');
  ```
- **API Calls:** Use `jest.fn()` or libraries like `msw` (Mock Service Worker) for more complex API mocking.
- **React Navigation:** Mock navigation functions when testing components that use them. `@react-navigation/testing-library` can be helpful.

## General Best Practices
- **Arrange, Act, Assert (AAA):** Structure your tests clearly.
- **Independent Tests:** Each test should be independent and not rely on the state of other tests.
- **Descriptive Test Names:** Use `describe` and `it` (or `test`) blocks with clear descriptions of what is being tested.
- **Coverage:** Aim for good test coverage, especially for critical business logic and utility functions.
- **Run Tests Frequently:** Integrate testing into your development workflow.